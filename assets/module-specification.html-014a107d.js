import{_ as t,M as p,p as i,q as c,R as n,t as s,N as e,a1 as o}from"./framework-96b046e1.js";const l={},u=o(`<h1 id="模块规范-cjs-amd-cmd-umd-esm" tabindex="-1"><a class="header-anchor" href="#模块规范-cjs-amd-cmd-umd-esm" aria-hidden="true">#</a> 模块规范(CJS,AMD,CMD,UMD,ESM)</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>前端是个不断发展的技术，从以前的三板斧<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>，逐渐日益壮大到各种框架百花齐放，各种工具层出不穷，但是项目文件关系之间依旧很割裂，各种依赖只能靠开发人员手动维护顺序来保证各种模块之间的依赖顺序，比如 <code>JQuery</code> 和其他依赖于JQuery的库，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。</p><h2 id="发展历史" tabindex="-1"><a class="header-anchor" href="#发展历史" aria-hidden="true">#</a> 发展历史</h2><p>在模块化标准还没有诞生的时候，前端模块化的雏形有三种形式：</p><ul><li>文件划分</li><li>命名空间</li><li><code>IIFE</code> 私有作用域</li><li><code>IIFE</code> 参数作为依赖声明使用</li></ul><h4 id="文件划分" tabindex="-1"><a class="header-anchor" href="#文件划分" aria-hidden="true">#</a> 文件划分</h4><p>这是最早的模块化实现，简单来说就是把应用的状态和逻辑放到不同的 JS 文件中，HTML 中通过不同的 script 标签一一引入。这样的缺点是：</p><ul><li>模块变量相当于在全局声明和定义，会有变量名冲突的问题。</li><li>变量都在全局定义，导致难以调试，我们很难知道某个变量到底属于哪些模块。</li><li>无法清晰地管理模块之间的依赖关系和加载顺序。 <ul><li>假如 a.js 依赖 b.js，那么 HTML 中的 script 执行顺序需要手动调整，不然可能会产生运行时错误。</li></ul></li></ul><h4 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h4><p>命名空间的出现解决了文件划分带来的部分问题，每个变量都有自己专属的命名空间，可以清楚地知道某个变量到底属于哪个模块，同时也避免全局变量命名的问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// module-a.js</span>
  window<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;moduleA&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;A&#39;s module&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// module-b.js</span>
  window<span class="token punctuation">.</span>moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;moduleB&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;B&#39;s module&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="iife" tabindex="-1"><a class="header-anchor" href="#iife" aria-hidden="true">#</a> IIFE</h4>`,13),d=n("code",null,"IIFE",-1),r={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/IIFE",target:"_blank",rel:"noopener noreferrer"},k=o(`<p>每个<code>IIFE</code>都会创建一个私有的作用域，也就是闭包。在私有作用域中的变量外界是无法访问的，只有模块内部的方法才能访问。相比于命名空间的模块化手段，<code>IIFE</code>实现的模块化安全性要更高，对于模块作用域的区分更加彻底，</p><p>具体做法，就是将每个模块成员都放在一个函数提供的私有作用域中，对于需要暴露给外部的成员，通过挂到全局对象（window）上的方式实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// module-a.js</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">&quot;moduleA&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">&quot;moduleA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    window<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> method<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// module-b.js</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">&quot;moduleB&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">&quot;moduleB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    window<span class="token punctuation">.</span>moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> method<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于其中的<code>data</code>变量，我们只能在模块内部的method函数中通过闭包访问，而在其它模块中无法直接访问。这就是模块私有功能功能，避免模块私有成员被其他模块非法篡改，相比于命名空间的实现方式更加安全。</p><p>然而命名空间和 <code>IIFE</code> 都没有解决另一个问题──模块加载。如果模块间存在依赖关系，那么 <code>script</code> 标签的加载顺序就需要受到严格的控制，一旦顺序不对，则很有可能产生运行时 Bug。</p><h4 id="iife参数作为依赖声明使用" tabindex="-1"><a class="header-anchor" href="#iife参数作为依赖声明使用" aria-hidden="true">#</a> <code>IIFE</code>参数作为依赖声明使用</h4><p>在<code>IIFE</code>的基础上，利用立即执行函数的参数传递模块依赖项，每个模块之间的关系会更加明显。</p><p>例如，在模块中要使用到 <code>jQuery</code>，就可以通过在自执行函数接收一个 <code>$</code> 的参数，在立即调用时，传递 <code>jQuery</code> 参数。这样的话，在后期维护这个模块时，就可以很清楚的知道，这个模块需要依赖 <code>jQuery</code>。 s</p><h2 id="模块规范的出现" tabindex="-1"><a class="header-anchor" href="#模块规范的出现" aria-hidden="true">#</a> 模块规范的出现</h2><p>以上的方式，都是以原始的模块系统为基础，通过约定的方式实现模块化的代码组织。这些方式在不同的开发者去实施的时候，可能会有细微的差别。为了统一不同的开发者，和不同项目之间的差异，我们需要一个标准去规范模块化的实现方式。</p><p>在模块化当中，针对于模块加载的问题，在上面几种方式中，都是通过 <code>script</code> 标签，手动引入每个用到的模块，这就意味着，模块的加载并不受代码的控制，时间久了之后，维护起来就很麻烦。</p><p>试想一下，如果代码中依赖了一个模块，而在 <code>html</code> 中忘记引用这个模块，就会出现问题了。又或者是，在代码中移除了某个模块的引用，又忘记在 <code>html</code> 中删除这个模块的引用，这些都会产生很大的问题。所以需要一些基础的公共代码，通过代码实现自动加载模块。</p><p>总的来说，现在需要一个模块化的规范，和一个可以用来自动加载模块的基础库。</p><h2 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJS</h2><p>CommonJS是 <code>Node.js</code> 中提出的一套标准，在 <code>Node.js</code> 中，所有的模块代码必须遵循 CommonJS 规范。它有以下特点：</p><ul><li>每个文件就是一个模块 - module</li><li>有自己的作用域</li><li>通过 module.exports 导出模块内成员</li><li>require 函数载入模块</li><li>模块可以多次加载，但是只会在第一次加载时运行一次</li><li>模块加载的顺序，按照其在代码中出现的顺序</li></ul><h4 id="cjs模块" tabindex="-1"><a class="header-anchor" href="#cjs模块" aria-hidden="true">#</a> CJS模块</h4><ul><li>将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起</li><li>块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信</li></ul><h4 id="cjs作用域" tabindex="-1"><a class="header-anchor" href="#cjs作用域" aria-hidden="true">#</a> CJS作用域</h4><ul><li>所有代码都运行在模块作用域，不会污染全局作用域。</li><li>在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</li></ul><h4 id="module-exports" tabindex="-1"><a class="header-anchor" href="#module-exports" aria-hidden="true">#</a> module.exports</h4><ul><li>module代表当前模块，是一个对象，保存了当前模块的信息。</li><li>exports 是 module 上的一个属性，保存了当前模块要导出的接口或者变量。</li><li>exports 是模块内的私有局部变量，它只是指向了 module.exports，所以直接对 exports 赋值是无效的，这样只是让 exports 不再指向module.exports了而已。</li></ul><h4 id="require" tabindex="-1"><a class="header-anchor" href="#require" aria-hidden="true">#</a> require</h4><ul><li>require的功能是：读取并执行一个JavaScript文件，然后返回该模块的exports对象。</li><li>读取时如果没有发现指定模块，会报错。</li><li>使用 require 加载的某个模块获取到的值就是那个模块使用 exports 导出的值。</li></ul><h4 id="加载" tabindex="-1"><a class="header-anchor" href="#加载" aria-hidden="true">#</a> 加载</h4><ul><li>第一次加载时，就缓存了运行结果，以后再加载，就直接读取缓存结果。</li><li>要想让模块再次运行，必须清除缓存。</li><li><strong>CommonJS 模块的加载机制是，<code>require</code> 是被导出的值的拷贝。也就是说，一旦导出一个值，模块内部的变化就影响不到这个值</strong></li></ul><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// A.js</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;moduleA&#39;</span>
  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">22</span>
  exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  exports<span class="token punctuation">.</span><span class="token function-variable function">getAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> age
  <span class="token punctuation">}</span>

  <span class="token comment">// B.js</span>
  <span class="token keyword">var</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;A.js&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A.name=&#39;</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A.age=&#39;</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span>
  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">35</span>
  exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  exports<span class="token punctuation">.</span><span class="token function-variable function">getAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> age
  <span class="token punctuation">}</span>

  <span class="token comment">// index.js</span>
  <span class="token keyword">var</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;B.js&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B.name=&#39;</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果向一个立即执行函数提供 <code>require</code> 、 <code>exports</code> 、 <code>module</code> 三个参数，模块代码放在这个立即执行函数里面。模块的导出值放在 <code>module.exports</code> 中</p><p>这样就可以实现模块的加载。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// b.js</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;a.js&quot;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.name=&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.age=&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;lilei&#39;</span>
    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">15</span>
    exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    exports<span class="token punctuation">.</span><span class="token function-variable function">getAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> age
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="弊端" tabindex="-1"><a class="header-anchor" href="#弊端" aria-hidden="true">#</a> 弊端</h3><p>CommonJS 是以同步模式加载模块的，因为 Node 的执行机制是，在启动时加载模块，执行过程中是不需要加载的，只会使用到模块，所以这种方式在 Node 中不会有问题。</p><p>在服务端，模块文件都存在本地磁盘，读取非常快，但是在浏览器端，如果使用 CommonJS 规范的话，因为每次页面加载，都会有大量的同步模式请求出现，就会导致页面效率偏低了。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><p>目前 commonjs 广泛应用于以下几个场景：</p><ul><li><code>Nodejs</code> 是 CommonJS 在服务器端一个具有代表性的实现；</li><li><code>Browserify</code> 是 CommonJS 在浏览器中的一种实现；</li><li><code>webpack</code> 打包工具对 CommonJS 的支持和转换；也就是前端应用也可以在编译之前，尽情使用 CommonJS 进行开发。</li></ul><h2 id="amd" tabindex="-1"><a class="header-anchor" href="#amd" aria-hidden="true">#</a> AMD</h2><p><code>AMD</code> (Asynchronous Module Definition)，异步模块定义。</p><p>AMD由于不是JavaScript原生支持，使用AMD规范进行页面开发需要用到对应的<code>RequireJS</code>库函数，实际上AMD是 RequireJS 在推广过程中对模块定义的规范化的产出。</p><p>RequireJS主要解决两个问题 - 多个js文件可能有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器 - js加载的时候浏览器会停止页面渲染，加载文件越多，页面失去响应时间越长</p><p>AMD规范，制定了定义模块的规则，使得模块之间的依赖可以被异步加载。</p><p>AMD的异步，就是所有的模块将被异步加载，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p><p>浏览器端模块加载器核心所在是异步的处理，AMD的异步和浏览器的异步加载模块的环境刚好适应（浏览器同步加载模块会导致性能、可用性、调试和跨域访问等问题）。</p><p>AMD规范由CommonJs规范演进而来，大部分思想跟CommonJS类似，属于<code>Modules/Async</code>流派。但AMD规范是专注于浏览器端的，根据浏览器特点做了自己的一些定义实现。</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><p>requireJS定义了一个函数 define，它是全局变量，用来定义模块</p><p><code>define(id?, dependencies?, factory)</code>;</p><ul><li>id：可选参数，用来定义模块的标识，如果没有提供该参数，脚本文件名（去掉拓展名）</li><li>dependencies：是一个当前模块依赖的模块名称数组</li><li>factory：工厂方法，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值 在页面上使用require函数加载模块</li></ul><p><code>require([dependencies], function(){});</code></p><p>require()函数接受两个参数</p><ul><li>第一个参数是一个数组，表示所依赖的模块</li><li>第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块</li></ul><p>require()函数在加载依赖的函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。</p><h2 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h2><p><code>CMD</code> (Common Module Definition)，通用模块定义</p><p>CMD 是 <code>Sea.js</code> 在推广过程中对模块定义的规范化产出。SeaJS要解决的问题和RequireJS一样，只不过在模块定义方式和模块加载（可以说运行、解析）时机上有所不同</p><ul><li>一个文件一个模块，所以经常就用文件名作为模块id</li><li>CMD推崇依赖就近，所以一般不在define的参数中写依赖，在factory中写</li></ul><h4 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h4><p><code>define(id?, deps?, factory)</code></p><p>factory是一个函数，有三个参数，function(require, exports, module)</p><ul><li>require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口：require(id)</li><li>exports 是一个对象，用来向外提供模块接口</li><li>module 是一个对象，上面存储了与当前模块相关联的一些属性和方法</li></ul><h2 id="umd" tabindex="-1"><a class="header-anchor" href="#umd" aria-hidden="true">#</a> UMD</h2><p><code>UMD</code> (Universal Module Definition), 统一模块定义 UMD是一种javascript通用模块定义规范，让你的模块能在javascript所有运行环境中发挥作用，它是AMD和CommonJS的糅合，跨平台的解决方案。</p><p>在UMD中，先判断是否支持Node.js的模块（<code>exports</code>）是否存在，存在则使用Node.js模块模式。再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。</p><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点：</h4><ul><li>前后端均通用</li><li>与<code>CJS</code>或<code>AMD</code>不同，UMD更像是一种配置多个模块系统的模式。</li><li>UMD在使用诸如 <code>Rollup</code> / <code>Webpack</code> 之类的 <code>bundler</code> 时通常用作备用模块</li><li>扮演过渡机制的角色，执行工厂函数，全局对象挂载属性</li></ul><h2 id="es-module" tabindex="-1"><a class="header-anchor" href="#es-module" aria-hidden="true">#</a> ES Module</h2><ul><li>输出/export</li><li>输入/import</li><li>ES Module 静态的，不能放在块级作用域内，代码发生在编译时。</li><li>ES Module 的值是动态绑定的，可以通过导出方法修改，可以直接访问修改结果。</li><li>ES Module 可以导出多个属性和方法，可以单个导入导出，混合导入导出。</li><li>ES Module 模块提前加载并执行模块文件，</li><li>ES Module 导入模块在严格模式下。</li><li>ES Module 静态导入导出的特性可以很容易实现 Tree Shaking 和 Code Splitting。</li><li>ES Module 输入的模块变量是不可重新赋值的，它只是个可读引用，不过却可以改写属性</li><li>Es Module 还可以 import() 懒加载方式实现代码分割。</li></ul><p>ES6的模块不是对象，<code>import</code>命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p><h2 id="es-module-模块与-commonjs-模块的差异" tabindex="-1"><a class="header-anchor" href="#es-module-模块与-commonjs-模块的差异" aria-hidden="true">#</a> ES Module 模块与 CommonJS 模块的差异</h2><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。 <ul><li>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li><li>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。原始值变了，import加载的值也会跟着变， ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li></ul></li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。 <ul><li>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</li><li>编译时加载: ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，import时采用静态命令的形式。即在import时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</li></ul></li></ul><p>CommonJS 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。</p><p>ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档：</h2>`,74),m={href:"https://zhuanlan.zhihu.com/p/513972915",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/6847902223133835272#heading-11",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/6844903541853650951",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/6844903927104667662",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/6844903576309858318",target:"_blank",rel:"noopener noreferrer"};function g(x,S){const a=p("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[d,s("（Immediately Invoked Function Expression） "),n("a",r,[s("立即执行函数"),e(a)])]),k,n("ul",null,[n("li",null,[n("a",m,[s("前端模块化发展历程"),e(a)])]),n("li",null,[n("a",v,[s("CommonJS 不是前端却革命了前端"),e(a)])]),n("li",null,[n("a",h,[s("前端模块化，AMD与CMD的区别"),e(a)])]),n("li",null,[n("a",b,[s("可能是最详细的UMD模块入门指南"),e(a)])]),n("li",null,[n("a",f,[s("前端模块化：CommonJS,AMD,CMD,ES6"),e(a)])])])])}const M=t(l,[["render",g],["__file","module-specification.html.vue"]]);export{M as default};
