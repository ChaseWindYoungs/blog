import{_ as n,p as s,q as a,a1 as t}from"./framework-96b046e1.js";const e={},p=t(`<h1 id="vue响应式原理-object-defineproperty-全过程解析" tabindex="-1"><a class="header-anchor" href="#vue响应式原理-object-defineproperty-全过程解析" aria-hidden="true">#</a> Vue响应式原理(Object.defineProperty)全过程解析</h1><h3 id="vue-如何动态的更新" tabindex="-1"><a class="header-anchor" href="#vue-如何动态的更新" aria-hidden="true">#</a> Vue 如何动态的更新</h3><aside> 💡 Vue 的响应式原理是通过 Object.defineProperty 实现的。被 Object.defineProperty 绑定过的对象，会变成「响应式」化。也就是改变这个对象的时候会触发 get 和 set 事件。进而触发一些视图更新。其中最重要的几个点包括 Observer， defineReactive， Dep， Watcher </aside><h3 id="observer「响应式」" tabindex="-1"><a class="header-anchor" href="#observer「响应式」" aria-hidden="true">#</a> Observer「响应式」</h3><p>循环修改为每个属性添加 get set</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">Observer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 循环修改为每个属性添加get setfor (let key in data) {</span>
    <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.defineProperty: 实现代理对象的方法，并且将对象的改变推送到调度中心 Dep 中</p><p>举个例子 🌰：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我被读了，我要不要做点什么好?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据被改变了，我要把新的值渲染到页面上去!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 对data上的text属性进行绑定</span>
<span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 控制台输出 &lt;我被读了，我要不要做点什么好?&gt;</span>
data<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&quot;hello Vue&quot;</span><span class="token punctuation">;</span><span class="token comment">// 控制台输出 &lt;hello Vue &amp;&amp; 数据被改变了，我要把新的值渲染到页面上去!&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dep-「依赖管理」" tabindex="-1"><a class="header-anchor" href="#dep-「依赖管理」" aria-hidden="true">#</a> Dep 「依赖管理」</h3><p>Dep 对象用于依赖收集，它实现了一个发布订阅模式，完成了数据 Data 和渲染视图 Watcher 的订阅，</p><p>Dep对象中的 subs 是一个数组，存放搜集到的 所有使用到这个 data 的 Watcher 对象 对象集合</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>
  <span class="token comment">// 根据 ts 类型提示，我们可以得出 Dep.target 是一个 Watcher 类型。</span>
  <span class="token keyword">static</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">;</span>
  <span class="token comment">// subs 存放搜集到的 Watcher 对象集合</span>
  <span class="token literal-property property">subs</span><span class="token operator">:</span> Array<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Watcher</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;
  constructor() </span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">
  addSub(sub: Watcher) </span><span class="token punctuation">{</span>
    <span class="token comment">// 搜集所有使用到这个 data 的 Watcher 对象。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">
  depend() </span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 搜集依赖，最终会调用上面的 addSub 方法</span>
      Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token plain-text">
  notify() </span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 调用对应的 Watcher，更新视图</span>
      subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token plain-text">
}
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 defineReactive 方法将 data 中的数据进行响应式后，虽然可以监听到数据的变化了，但是怎么处理通知视图就更新呢？</p><p>Dep 就是收集【究竟要通知到哪里的】。</p><p>比如下面的代码案例，虽然 data 中有 text 和 message 属性，但是只有 message 被渲染到页面上，至于 text 无论怎么变化都影响不到视图的展示，因此仅仅对 message 进行收集即可，可以避免一些无用的工作。</p><p>那这个时候 message 的 Dep 就收集到了一个依赖，这个依赖就是用来管理 data 中 message 变化的。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello vue&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用 watch 属性时，也就是开发者自定义的监听某个 data 中属性的变化。</p><p>比如监听 message 的变化，message 变化时我们就要通知到 watch 这个钩子，让它去执行回调函数。</p><p>这个时候 message 的 Dep 就收集到了两个依赖，第二个依赖就是用来管理 watch 中 message 变化的。</p><p>当开发者自定义 computed 计算属性时，如下 messageT 属性，是依赖 message 的变化的。</p><p>因此 message 变化时我们也要通知到 computed，让它去执行回调函数。</p><p>这个时候 message 的 Dep 就收集到了三个依赖，这个依赖就是用来管理 computed 中 message 变化的。</p><p><strong>一个属性可能有多个依赖，每个响应式数据都有一个 Dep 来管理它的依赖</strong></p><h3 id="如何收集依赖" tabindex="-1"><a class="header-anchor" href="#如何收集依赖" aria-hidden="true">#</a> 如何收集依赖</h3><p>如何知道 data 中的某个属性被使用了，答案就是 Object.defineProperty，因为读取某个属性就会触发 get 方法。可以将代码进行如下改造</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> Dep<span class="token punctuation">;</span><span class="token comment">// 依赖Object.defineProperty(obj, key, {</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我被读了，我要不要做点什么好?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 被读取了，将这个依赖收集起来</span>
      Dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 本次新增return val;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
<span class="token comment">// 被改变了，通知依赖去更新</span>
      Dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 本次新增console.log(&quot;数据被改变了，我要把新的值渲染到页面上去!&quot;);</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是依赖" tabindex="-1"><a class="header-anchor" href="#什么是依赖" aria-hidden="true">#</a> 什么是依赖</h3><p>那所谓的依赖究竟是什么呢？上面的图中已经暴露了答案，就是 <strong>Watcher</strong>。</p><h3 id="watcher-「中介」" tabindex="-1"><a class="header-anchor" href="#watcher-「中介」" aria-hidden="true">#</a> Watcher 「中介」</h3><p>Watcher 就是类似中介的角色。</p><p>比如 message 就有三个中介，当 message 变化，就通知这三个中介，他们就去执行各自需要做的变化。</p><p>Watcher 能够控制自己属于哪个，是 data 中的属性的还是 watch，或者是 computed，Watcher 自己有统一的更新入口，只要你通知它，就会执行对应的更新方法。</p><p>因此我们可以推测出，Watcher 必须要有的 2 个方法。一个就是通知变化，另一个就是被收集起来到 Dep 中去。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>
    <span class="token function">addDep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 我这个Watcher要被塞到Dep里去了~~</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// Dep通知我更新呢~~</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="大致流程" tabindex="-1"><a class="header-anchor" href="#大致流程" aria-hidden="true">#</a> <strong>大致流程</strong></h3><ul><li>发生在 beforeCreate 和 created 之间 initState(vm)中的 defineProperty</li><li>发生在 beforeMount 和 mounted 之间的 Dep 和 Watcher 的初始化</li><li>发生在 beforeUpdate 前到 updated 触发，这期间 Watcher 的相关变化</li></ul><blockquote><p>vue将data初始化为一个Observer并对对象中的每个值，重写了其中的get、set，data中的每个key，都有一个独立的依赖收集器。</p></blockquote><blockquote><p>在get中，向依赖收集器添加了监听，在mount时，实例了一个Watcher，将收集器的目标指向了当前Watcher。</p></blockquote><blockquote><p>在data值发生变更时，触发set，触发了依赖收集器中的所有监听的更新，来触发Watcher.update</p></blockquote>`,41),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","defineProperty.html.vue"]]);export{r as default};
